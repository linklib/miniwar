generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid()) @db.VarChar(32)
  username       String?         @unique
  email          String?         @unique
  fullname       String?
  password       String?
  active         Boolean         @default(true)
  role           Role            @default(USER)
  sudo           Boolean         @default(false)
  createdAt      DateTime        @default(now("0")) @db.DateTime(0)
  updatedAt      DateTime        @default(now("0")) @updatedAt @db.DateTime(0)
  showEmail      Boolean         @default(false)
  showFullname   Boolean         @default(true)
  image          String?
  Tokens         Token[]
  Files          File[]
  Letters        Letter[]
  ResetPasswords ResetPassword[]
  Posts          Post[]
}

enum Role {
  USER
  ADMIN
}

model Token {
  id        String    @id @default(cuid()) @db.VarChar(32)
  createdAt DateTime  @default(now("0")) @db.DateTime(0)
  expiredAt DateTime? @db.DateTime(0)
  userId    String?   @db.VarChar(32)

  // User - не обязательный объект, так как необходимость сформировать токен
  // может быть еще до существования объекта пользователя
  User User? @relation(fields: [userId], references: [id])

  @@index(createdAt)
}

model File {
  id        String   @id @default(cuid()) @db.VarChar(32)
  createdAt DateTime @default(now("0")) @db.DateTime(0)
  updatedAt DateTime @default(now("0")) @updatedAt @db.DateTime(0)
  path      String   @db.MediumText
  filename  String
  name      String?
  mimetype  String
  encoding  String
  size      Float
  rank      Int      @default(value: 0)

  createdById String? @db.VarChar(32)
  CreatedBy   User?   @relation(fields: [createdById], references: [id])

  PostImages PostImage[]
}

model Letter {
  id           String       @id @default(cuid()) @db.VarChar(32)
  createdAt    DateTime     @default(now("0")) @db.DateTime(0)
  updatedAt    DateTime     @default(now("0")) @updatedAt @db.DateTime(0)
  email        String       @db.MediumText
  subject      String       @db.MediumText
  message      String       @db.MediumText
  status       LetterStatus @default(value: Created)
  errorMessage String?      @db.Text
  rank         Int?
  deleteOnSend Boolean      @default(value: true)
  replyTo      String?      @db.MediumText
  returnTo     String?      @db.MediumText
  createdById  String?      @db.VarChar(32)
  CreatedBy    User?        @relation(fields: [createdById], references: [id])

  @@index([createdById], name: "User")
}

enum LetterStatus {
  Created
  Processing
  Sended
  Error
}

model Log {
  id         String   @id @default(cuid()) @db.VarChar(32)
  createdAt  DateTime @default(now("0")) @db.DateTime(0)
  updatedAt  DateTime @default(now("0")) @updatedAt @db.DateTime(0)
  level      LogLevel @default(value: Info)
  objectType String?  @db.VarChar(32)
  message    String   @db.MediumText
  stack      String?  @db.MediumText
}

enum LogLevel {
  Info
  Notice
  Warning
  Error
  Fatal
}

model ResetPassword {
  id                       String    @id @default(cuid()) @db.VarChar(32)
  createdAt                DateTime  @default(now("0")) @db.DateTime(0)
  updatedAt                DateTime  @default(now("0")) @updatedAt @db.DateTime(0)
  code                     String    @db.VarChar(32)
  password                 String
  validTill                DateTime?
  User                     String    @db.VarChar(32)
  User_ResetPasswordToUser User      @relation(fields: [User], references: [id])

  @@index([User], name: "User")
}

// Post:

model Post {
  id          String      @id @default(cuid()) @db.VarChar(32)
  createdAt   DateTime    @default(now("0")) @db.DateTime(0)
  updatedAt   DateTime    @default(now("0")) @updatedAt @db.DateTime(0)
  title       String
  urlname     String
  description String?
  image       String?
  content     Json?
  createdById String      @db.VarChar(32)
  CreatedBy   User        @relation(fields: [createdById], references: [id])
  PostImages  PostImage[]
  catalogId   String      @db.VarChar(32)
  Catalog     Catalog?    @relation(fields: [catalogId], references: [id])

  @@index([createdById], name: "User")
}

model PostImage {
  id     String @id @default(cuid()) @db.VarChar(32)
  postId String @db.VarChar(32)
  Post   Post   @relation(fields: [postId], references: [id])
  fileId String @db.VarChar(32)
  File   File   @relation(fields: [fileId], references: [id])
}

model Catalogtop {
  id       String    @id @default(cuid()) @db.VarChar(32)
  title    String
  urlname  String
  Catalogs Catalog[]
}

model Catalog {
  id           String     @id @default(cuid()) @db.VarChar(32)
  title        String
  urlname      String
  CatalogtopId String     @db.VarChar(32)
  Catalogtop   Catalogtop @relation(fields: [CatalogtopId], references: [id])
  Posts        Post[]

}
